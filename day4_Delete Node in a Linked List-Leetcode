//FIRST APPROACH

class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        if(head-> next == NULL){
            return NULL;
        }
        
        ListNode* fast = head->next->next;
        ListNode* slow = head;
        while(fast != NULL && fast->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
            
        }
        slow->next = slow->next->next;
        return head;
    }
};







//SECOND APPROACH by formula get the previous of middle of node (n/2)-1 then 

ListNode* deleteMiddle(ListNode* head) {
    if(head-> next == NULL){
            return NULL;
        }
    int count=0;
    ListNode* temp = head;
    while(temp != NULL){
        temp = temp->next;
        count++;
    }
    int n = (count/2)-1;
    temp = head;
    while(n--){
        temp = temp->next;
    }
    temp -> next = temp ->next->next;
    

    return head;
}
};
